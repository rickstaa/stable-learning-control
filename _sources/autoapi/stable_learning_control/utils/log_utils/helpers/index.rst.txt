stable_learning_control.utils.log_utils.helpers
===============================================

.. py:module:: stable_learning_control.utils.log_utils.helpers

.. autoapi-nested-parse::

   Several logging related helper functions.



Attributes
----------

.. autoapisummary::

   stable_learning_control.utils.log_utils.helpers.LOG_TYPES


Functions
---------

.. autoapisummary::

   stable_learning_control.utils.log_utils.helpers.colorize
   stable_learning_control.utils.log_utils.helpers.log_to_std_out
   stable_learning_control.utils.log_utils.helpers.setup_logger_kwargs
   stable_learning_control.utils.log_utils.helpers.dict_to_mdtable


Module Contents
---------------

.. py:data:: LOG_TYPES

.. py:function:: colorize(string, color, bold=False, highlight=False)

   Colorize a string.

   .. seealso::
       This function wraps the :meth:`gym.utils.colorize` function to make sure that it
       also works with empty color strings.

   :param string: The string you want to colorize.
   :type string: str
   :param color: The color you want to use.
   :type color: str
   :param bold: Whether you want the text to be bold. Defaults to
                ``False``.
   :type bold: bool, optional
   :param highlight: Whether you want to highlight the text. Defaults to
                     ``False``.
   :type highlight: bool, optional

   :returns: Colorized string.
   :rtype: str


.. py:function:: log_to_std_out(msg, color='', bold=False, highlight=False, type=None, *args, **kwargs)

   Print a colorized message to stdout.

   :param msg: Message you want to log.
   :type msg: str
   :param color: Color you want the message to have. Defaults to
                 ``""``.
   :type color: str, optional
   :param bold: Whether you want the text to be bold text has to be
                bold.
   :type bold: bool, optional
   :param highlight: Whether you want to highlight the text.
                     Defaults to ``False``.
   :type highlight: bool, optional
   :param type: The log message type. Options are: ``info``, ``warning``
                and ``error``. Defaults to ``None``.
   :type type: str, optional
   :param \*args: All args to pass to the print function.
   :param \*\*kwargs: All kwargs to pass to the print function.


.. py:function:: setup_logger_kwargs(exp_name, seed=None, save_checkpoints=False, use_tensorboard=False, tb_log_freq='low', use_wandb=False, wandb_job_type=DEFAULT_WANDB_JOB_TYPE, wandb_project=DEFAULT_WANDB_PROJECT, wandb_group=None, wandb_run_name=None, quiet=False, verbose_fmt=DEFAULT_STD_OUT_TYPE, verbose_vars=[], data_dir=None, datestamp=False)

   Sets up the output_dir for a logger and returns a dict for logger kwargs.

   If no seed is given and datestamp is false,

   ::

       output_dir = data_dir/exp_name

   If a seed is given and datestamp is false,

   ::

       output_dir = data_dir/exp_name/exp_name_s[seed]

   If datestamp is true, amend to

   ::

       output_dir = data_dir/YY-MM-DD_exp_name/YY-MM-DD_HH-MM-SS_exp_name_s[seed]

   You can force datestamp=True by setting ``FORCE_DATESTAMP=True`` in
   ``stable_learning_control/user_config.py``.

   :param exp_name: Name for experiment.
   :type exp_name: str
   :param seed: Seed for random number generators used by experiment.
   :type seed: int, optional
   :param save_checkpoints: Save checkpoints during training.
                            Defaults to ``False``.
   :type save_checkpoints: bool, optional
   :param use_tensorboard: Whether you want to use TensorBoard. Defaults
                           to ``True``.
   :type use_tensorboard: bool, optional
   :param tb_log_freq: The TensorBoard log frequency. Options are ``low``
                       (Recommended: logs at every epoch) and ``high`` (logs at every SGD update "
                       batch). Defaults to ``low`` since this is less resource intensive.
   :type tb_log_freq: str, optional
   :param use_wandb: Whether you want to use Weights & Biases. Defaults
                     to ``False``.
   :type use_wandb: bool, optional
   :param wandb_job_type: The Weights & Biases job type. Defaults to
                          ``None``.
   :type wandb_job_type: str, optional
   :param wandb_project: The name of the Weights & Biases project you
                         want to log to. Defaults to ``None``.
   :type wandb_project: str, optional
   :param wandb_group: The name of the Weights & Biases group you want to
                       assign the run to. Defaults to ``None``.
   :type wandb_group: str, optional
   :param wandb_run_name: The name of the Weights & Biases run. Defaults
                          to ``None`` which means that the run name is automatically generated.
   :type wandb_run_name: str, optional
   :param quiet: Whether you want to suppress logging of the diagnostics
                 to the stdout. Defaults to ``False``.
   :type quiet: bool, optional
   :param verbose_fmt: The format in which the diagnostics are
                       displayed to the terminal. Options are ``table`` which supplies them as a
                       table and ``line`` which prints them in one line. Defaults to ``line``.
   :type verbose_fmt: str, optional
   :param verbose_vars: A list of variables you want to log to the
                        stdout. By default all variables are logged.
   :type verbose_vars: list, optional
   :param data_dir: Path to folder where results should be saved.
                    Default is the ``DEFAULT_DATA_DIR`` in
                    ``stable_learning_control/user_config.py``. Defaults to ``None``.
   :type data_dir: str, optional
   :param datestamp: Whether to include a date and timestamp in the
                     name of the save directory. Defaults to ``False``.
   :type datestamp: bool, optional

   :returns:

             logger_kwargs
                 A dict containing output_dir and exp_name.
   :rtype: dict


.. py:function:: dict_to_mdtable(d, key='Name', val='Value')

   Convert a dictionary to a markdown table.

   :param d: The dictionary you want to convert.
   :type d: dict
   :param key: The name of the key column. Defaults to ``"Name"``.
   :type key: str, optional
   :param val: The name of the value column. Defaults to ``"Value"``.
   :type val: str, optional

   :returns: The markdown table.
   :rtype: str


