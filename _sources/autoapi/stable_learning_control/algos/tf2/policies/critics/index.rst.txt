stable_learning_control.algos.tf2.policies.critics
==================================================

.. py:module:: stable_learning_control.algos.tf2.policies.critics

.. autoapi-nested-parse::

   Critic network structures.



Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/stable_learning_control/algos/tf2/policies/critics/L_critic/index
   /autoapi/stable_learning_control/algos/tf2/policies/critics/Q_critic/index


Classes
-------

.. autoapisummary::

   stable_learning_control.algos.tf2.policies.critics.LCritic
   stable_learning_control.algos.tf2.policies.critics.QCritic


Package Contents
----------------

.. py:class:: LCritic(obs_dim, act_dim, hidden_sizes, activation=nn.relu, name='lyapunov_critic', **kwargs)

   Bases: :py:obj:`tensorflow.keras.Model`


   Soft Lyapunov critic Network.

   .. attribute:: L

      The layers of the network.

      :type: tf.keras.Sequential

   Initialise the LCritic object.

   :param obs_dim: Dimension of the observation space.
   :type obs_dim: int
   :param act_dim: Dimension of the action space.
   :type act_dim: int
   :param hidden_sizes: Sizes of the hidden layers.
   :type hidden_sizes: list
   :param activation: The activation
                      function. Defaults to :obj:`tf.nn.relu`.
   :type activation: :obj:`tf.keras.activations`, optional
   :param name: The Lyapunov critic name. Defaults to
                ``lyapunov_critic``.
   :type name: str, optional
   :param \*\*kwargs: All kwargs to pass to the :mod:`tf.keras.Model`. Can be used to
                      add additional inputs or outputs.


   .. py:attribute:: L


   .. py:method:: call(inputs)

      Perform forward pass through the network.

      :param inputs: tuple containing:

                     - obs (tf.Tensor): The tensor of observations.
                     - act (tf.Tensor): The tensor of actions.
      :type inputs: tuple

      :returns:     The tensor containing the lyapunov values of the input observations and
                    actions.
      :rtype: tf.Tensor



.. py:class:: QCritic(obs_dim, act_dim, hidden_sizes, activation=nn.relu, output_activation=None, name='q_critic', **kwargs)

   Bases: :py:obj:`tensorflow.keras.Model`


   Soft Q critic network.

   .. attribute:: Q

      The layers of the network.

      :type: tf.keras.Sequential

   Initialise the QCritic object.

   :param obs_dim: Dimension of the observation space.
   :type obs_dim: int
   :param act_dim: Dimension of the action space.
   :type act_dim: int
   :param hidden_sizes: Sizes of the hidden layers.
   :type hidden_sizes: list
   :param activation: The activation function.
                      Defaults to :obj:`tf.nn.relu`.
   :type activation: :obj:`tf.keras.activations`, optional
   :param output_activation: The activation
                             function used for the output layers. Defaults to ``None`` which is
                             equivalent to using the Identity activation function.
   :type output_activation: :obj:`tf.keras.activations`, optional
   :param name: The Lyapunov critic name. Defaults to ``q_critic``.
   :type name: str, optional
   :param \*\*kwargs: All kwargs to pass to the :mod:`tf.keras.Model`. Can be used to
                      add additional inputs or outputs.


   .. py:attribute:: Q


   .. py:method:: call(inputs)

      Perform forward pass through the network.

      :param inputs: tuple containing:

                     - obs (tf.Tensor): The tensor of observations.
                     - act (tf.Tensor): The tensor of actions.
      :type inputs: tuple

      :returns:     The tensor containing the Q values of the input observations and
                    actions.
      :rtype: tf.Tensor



