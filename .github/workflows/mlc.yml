# MAin MLC github action. Performs linting and formatting checks. It also runs tests.
name: MLC CI
on:
  push:
    branches:
      - main
  pull_request:
jobs:
  spell-check:
    name: runner / misspell
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: reviewdog/action-misspell@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-check
          level: warning
          locale: "UK"
  alex: # Checks docs for inconsiderate writing
    name: runner / alex
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: reviewdog/action-alex@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-check
          level: warning
  markdown-lint: # Lints the markdown code
    name: runner / remark-lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout mlc repository
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 2
      - name: Check markdown code quality using remark-lint
        uses: reviewdog/action-remark-lint@master # TODO: Fix version
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          level: warning
  black: # Check python code format
    name: runner / black
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: reviewdog/action-black@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-check
          level: warning
  flake8: # Lints python code
    name: runner / flake8
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout mlc repository
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 1
      - name: Install system dependencies
        run: sudo apt-get install libopenmpi-dev
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Cache python environment
        uses: actions/cache@v2
        id: cache-python-env
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('dev_requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install python dependencies from the requirements file
        if: steps.cache-python-env.outputs.cache-hit != 'true'
        run: |
          pip install --upgrade --upgrade-strategy eager -r dev_requirements.txt -e .
      - name: Install the mlc package
        if: steps.cache-python-env.outputs.cache-hit != 'true'
        run: |
          pip install -e .
      - name: flake8 Lint
        uses: reviewdog/flake8@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
  python-tests:
    name: python-tests (Testing)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Run all matrix jobs
      matrix:
        python-version: [3.6, 3.7, 3.8] # Supported python versions
    steps:
      - name: Checkout mlc repository
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install system dependencies
        run: sudo apt-get install libopenmpi-dev
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache python environment
        uses: actions/cache@v2
        id: cache-python-env
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('dev_requirements.txt') }}
      - name: Install python dependencies from the requirements file
        if: steps.cache-python-env.outputs.cache-hit != 'true'
        run: |
          pip install --upgrade --upgrade-strategy eager -r dev_requirements.txt -e .
      - name: Install the mlc package
        if: steps.cache-python-env.outputs.cache-hit != 'true'
        run: |
          pip install -e .
      - name: Test with Pytest
        run: pytest ./machine_learning_control --doctest-modules --html=pytest/${{ matrix.python-version }}/html/results.html --junitxml=pytest/${{ matrix.python-version }}/xml/results.xml --cov=./machine_learning_control --cov-report=html:pytest/${{ matrix.python-version }}/cov/
      - name: Upload Pytest test results to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: pytest/
        if: ${{ always() }}
      - name: Comment coverage
        uses: coroo/pytest-coverage-commentator@v1.0.2
        if: ${{ always() }}
