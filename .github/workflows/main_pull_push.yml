# Main push/Pull request CI config file
# Note: For local testing with https://github.com/nektos/act use the
# `sudo act -P ubuntu-latest=nektos/act-environments-ubuntu:18.04` command.
name: MLC pull CI

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:

  python-lint:
    name: python-flake8 (Linting)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout mlc repository
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 2
      - name: Install system dependencies
        run: sudo apt-get install libopenmpi-dev
      - name: Setup Python 3.8
        uses: actions/setup-python@v1
        with:
          with:
            python-version: '3.8'
      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip--${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip
            ${{ runner.os }}-
      - name: Install python dependencies from the requirements file
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Install flake8
        run: pip install flake8
      - name: Install mlc package
        run: |
          pip install .
      - name: Run flake8 linter and add annotations
        uses: suo/flake8-github-action@v1
        with:
          checkName: 'python-lint'   # NOTE: this needs to be the same as the job name
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Currently has a bug (see https://github.com/lgeiger/black-action/issues/11).
    name: python-black (Formatting)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout mlc repository
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 2
      - name: Check python code quality using black
        uses: lgeiger/black-action@v1.0.1

  python-tests:
    name: python-tests (Testing)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8] # Supported python versions

    steps:
      - name: Checkout mlc repository
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install system dependencies
        run: sudo apt-get install libopenmpi-dev
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip--${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip
            ${{ runner.os }}-${{ matrix.python-version }}
      # - name: Install python dependencies from the requirements file
      #   run: |
      #     python -m pip install --upgrade pip
      #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      # - name: Install mlc package
      #   run: |
      #     pip install .
      # - name: Install CI python dependencies
      #   run: pip install flake8 pytest pytest-cov
      # - name: Lint with flake8
      #   run: |
      #     # stop the build if there are Python syntax errors or undefined names
      #     flake8 ./machine_learning_control --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #     flake8 ./machine_learning_control --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # - name: Test with Pytest
      #   run: pytest tests.py --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml
      # - name: Upload pytest test results
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: pytest-results-${{ matrix.python-version }}
      #     path: junit/test-results-${{ matrix.python-version }}.xml
      #   # Use always() to always run this step to publish test results when there are test failures
        # if: ${{ always() }}

  markdown-lint:
    # Currently has a bug (see https://github.com/prologic/action-remark-lint/pull/4).
    name: markdown-lint (Linting)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout mlc repository
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 2
      - name: remark-lint
        # uses: prologic/action-remark-lint@v0.0.5
        uses: rickstaa/action-remark-lint@fix_reviewdog_exit_code_bug
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-check # Change reporter. (Only `github-pr-check` is supported at the moment).
          level: warning