# Main push/Pull request CI config file
# Note: For local testing with https://github.com/nektos/act use the
# `sudo act -P ubuntu-latest=nektos/act-environments-ubuntu:18.04` command.
name: MLC pull CI

# TODO: Check flake8 linting rules
# TODO: Check markdown lint fix

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:

  # Run python linter
  python-lint:
    name: python-flake8 (Linting)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout mlc repository
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 2
      - name: Install system dependencies
        run: sudo apt-get install libopenmpi-dev
      - name: Setup Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: '3.8'
      - name: Cache python environment
        uses: actions/cache@v2
        id: cache-python-env
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('dev_requirements.txt') }}
      - name: Install python dependencies from the requirements file
        if: steps.cache-python-env.outputs.cache-hit != 'true'
        run: |
          pip install --upgrade --upgrade-strategy eager -r dev_requirements.txt -e .
      - name: Install the mlc package
        if: steps.cache-python-env.outputs.cache-hit != 'true'
        run: |
          pip install -e .
      - name: Setup flake8 annotations
        uses: rbialon/flake8-annotations@v1
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 ./machine_learning_control --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. We use the black defined max-line-length
          flake8 ./machine_learning_control --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

  # Check python code quality
  python-format:
    # Currently has a bug (see https://github.com/lgeiger/black-action/issues/11).
    name: python-black (Formatting)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout mlc repository
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 2
      - name: Check python code quality using black
        uses: lgeiger/black-action@v1.0.1

  # Run python tests
  python-tests:
    name: python-tests (Testing)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        fail-fast: false  # Run all matrix jobs
        python-version: [3.6, 3.7, 3.8]  # Supported python versions

    steps:
      - name: Checkout mlc repository
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install system dependencies
        run: sudo apt-get install libopenmpi-dev
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache python environment
        uses: actions/cache@v2
        id: cache-python-env
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('dev_requirements.txt') }}
      - name: Install python dependencies from the requirements file
        if: steps.cache-python-env.outputs.cache-hit != 'true'
        run: |
          pip install --upgrade --upgrade-strategy eager -r dev_requirements.txt -e .
      - name: Install the mlc package
        if: steps.cache-python-env.outputs.cache-hit != 'true'
        run: |
          pip install -e .
      # - name: Lint with flake8
      #   run: |
      #     # stop the build if there are Python syntax errors or undefined names
      #     flake8 ./machine_learning_control --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # exit-zero treats all errors as warnings. We use the black defined max-line-length
      #     flake8 ./machine_learning_control --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      - name: Test with Pytest
        run: pytest \
          ./machine_learning_control \
          --doctest-modules \
          --html=pytest/${{ matrix.python-version }}/html/results.html \
          --junitxml=pytest/${{ matrix.python-version }}/xml/results.xml \
          --cov=./machine_learning_control \
          --cov-report=html:pytest/${{ matrix.python-version }}/cov/
      - name: Upload Pytest test results to artifacts
        uses: actions/upload-artifact@v2
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: pytest/
        if: ${{ always() }}  # Always run

  # Check markdown code quality
  markdown-lint:
    # Currently has a bug (see https://github.com/prologic/action-remark-lint/pull/4).
    name: markdown-lint (Linting)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout mlc repository
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 2
      - name: Check markdown code quality using remark-lint
        # uses: prologic/action-remark-lint@v0.0.5
        uses: rickstaa/action-remark-lint@fix_reviewdog_exit_code_bug
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-check # Change reporter. (Only `github-pr-check` is supported at the moment).
          level: warning