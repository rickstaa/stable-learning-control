# Checks the code quality of every commit and pr.
name: Code Quality CI
on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - "docs/**"
jobs:
  spell-check:
    name: runner / misspell
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: reviewdog/action-misspell@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-check
          level: warning
          exclude: README.md
  alex: # NOTE: Checks code for inconsiderate writing
    name: runner / alex
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: reviewdog/action-alex@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-check
          level: warning
  # NOTE: The jobs below are disabled since we now use husky to perform these as pre-commit actions.
  # markdown-lint: # NOTE: Checks markdown code and creates pull request if needed
  #   name: runner / remark-lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - if: github.event_name == 'push'
  #       uses: actions/checkout@v2
  #     - if: github.event_name == 'pull_request'
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ github.head_ref }}
  #     - uses: rickstaa/action-remark-lint@v1
  #       id: remark_lint
  #       with:
  #         remark_args: ". -o --ignore-pattern  CHANGELOG.md"
  #     - name: Annotate diff changes using reviewdog
  #       if: github.event_name == 'pull_request' && steps.remark_lint.outputs.is_formatted == 'true'
  #       uses: reviewdog/action-suggester@v1
  #       with:
  #         tool_name: remarkfmt
  #     - name: Create Pull Request
  #       if: steps.remark_lint.outputs.is_formatted == 'true'
  #       uses: peter-evans/create-pull-request@v3
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         title: "Format markdown code with remark-lint linter"
  #         commit-message: ":art: Format markdown code with remark-lint"
  #         body: |
  #           There appear to be some markdown formatting warning in ${{ github.sha }}. This pull request
  #           uses the [remark-lint](https://github.com/remarkjs/remark-lint) linter to fix these issues.
  #         branch: actions/code_quality_ci/remark-lint
  #         delete-branch: true
  #         labels: markdown
  #     - name: Print pull request info
  #       if: steps.black_format.outputs.is_formatted == 'true'
  #       run: |
  #         echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
  #         echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
  # black: # NOTE: Checks python code and creates pull request if needed
  #   name: runner / black
  #   runs-on: ubuntu-latest
  #   steps:
  #     - if: github.event_name == 'push'
  #       uses: actions/checkout@v2
  #     - if: github.event_name == 'pull_request'
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ github.head_ref }}
  #     - uses: rickstaa/action-black@v1
  #       id: black_format
  #       with:
  #         black_args: "."
  #     - name: Annotate diff changes using reviewdog
  #       if: github.event_name == 'pull_request' && steps.black_format.outputs.is_formatted == 'true'
  #       uses: reviewdog/action-suggester@v1
  #       with:
  #         tool_name: blackfmt
  #     - name: Create Pull Request
  #       if: steps.black_format.outputs.is_formatted == 'true'
  #       uses: peter-evans/create-pull-request@v3
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         title: "Format Python code with psf/black push"
  #         commit-message: ":art: Format Python code with psf/black"
  #         body: |
  #           There appear to be some python formatting errors in ${{ github.sha }}. This pull request
  #           uses the [psf/black](https://github.com/psf/black) formatter to fix these issues.
  #         branch: actions/code_quality_ci/black
  #         delete-branch: true
  #         labels: python
  #     - name: Print pull request info
  #       if: steps.black_format.outputs.is_formatted == 'true'
  #       run: |
  #         echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
  #         echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
  # flake8: # NOTE: Lints python code to see if there are any errors
  #   name: runner / flake8
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         submodules: recursive
  #         token: ${{ secrets.GA_SUB }}
  #         fetch-depth: 0
  #     - name: Install system dependencies
  #       run: sudo apt update; sudo apt install libopenmpi-dev
  #     - name: Set up Python environment
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: 3.7
  #     - name: Cache python environment
  #       uses: actions/cache@v2
  #       id: cache-python-env
  #       with:
  #         path: ${{ env.pythonLocation }}
  #         key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('setup.cfg') }}-${{ hashFiles('pyproject.toml') }}-dev
  #     - name: Update pip
  #       if: steps.cache-python-env.outputs.cache-hit != 'true'
  #       run: |
  #         python -m pip install --upgrade pip
  #     - name: Install the mlc package with its dependencies
  #       if: steps.cache-python-env.outputs.cache-hit != 'true'
  #       run: |
  #         pip install -e .[dev]
  #     - name: Flake8 Lint with reviewdog
  #       uses: reviewdog/action-flake8@v3
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         reporter: github-check
  #         level: warning
  #         fail_on_error: true
