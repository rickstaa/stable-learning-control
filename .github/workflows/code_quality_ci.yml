# Checks the code quality of every commit and pr.
name: Code Quality CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  spell-check:
    name: runner / misspell
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: reviewdog/action-misspell@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-check
          level: warning
  alex: # Checks docs for inconsiderate writing
    name: runner / alex
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: reviewdog/action-alex@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-check
          level: warning
  markdown-lint:
    name: runner / remark-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: reviewdog/action-remark-lint@v1.0.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-check
          level: warning
          fail_on_error: true
  black: # Check python code format
    name: runner / black
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        # with:
        #   ref: ${{ github.head_ref }} # NOTE: Uncomment if you want to commit the black changes
      - name: Black formatter with reviewdog
        uses: reviewdog/action-black@v1.4.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-check
          level: error
          fail_on_error: true
      - name: Set up Python environment
        if: failure()
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Cache python environment
        if: failure()
        uses: actions/cache@v2
        id: cache-python-env
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('setup.cfg') }}-${{ hashFiles('pyproject.toml') }}-black
      - name: Update pip
        if: failure() && steps.cache-python-env.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
      - name: Install black
        if: failure() && steps.cache-python-env.outputs.cache-hit != 'true'
        run: |
          pip install black
      - name: Apply black formatting if reviewdog found formatting errors
        if: failure()
        run: |
          black .
      # - name: Commit black formatting results  # Commit changes back to pull request
      #   if: failure()
      #   uses: stefanzweifel/git-auto-commit-action@v4
      #   with:
      #     commit_message: ":art: Format Python code with psf/black push"
      - name: Create Pull Request for the made changes # Create pull request
        if: failure()
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Format Python code with psf/black push"
          commit-message: ":art: Format Python code with psf/black"
          body: |
            There appear to be some python formatting errors in ${{ github.sha }}. This pull request
            uses the [psf/black](https://github.com/psf/black) formatter to fix these issues.
          branch: depup/black
  flake8: # Lints python code
    name: runner / flake8
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.GA_SUB }}
          fetch-depth: 0
      - name: Install system dependencies
        run: sudo apt-get install libopenmpi-dev
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Cache python environment
        uses: actions/cache@v2
        id: cache-python-env
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('setup.cfg') }}-${{ hashFiles('pyproject.toml') }}-dev
      - name: Update pip
        if: steps.cache-python-env.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
      - name: Install the mlc package with its dependencies
        if: steps.cache-python-env.outputs.cache-hit != 'true'
        run: |
          pip install -e .[dev]
      - name: Flake8 Lint with reviewdog
        uses: reviewdog/action-flake8@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-check
          level: warning
          fail_on_error: true