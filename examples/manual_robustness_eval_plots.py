"""A simple example of how to create a custom plot from the ``eval_results.csv`` file
generated by the :ref:`robustness evaluation utility <eval_robustness>` utility. This
example plots the first observation and reference for each disturbance in the dataset.
"""

import argparse
from pathlib import Path

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "fpath", type=str, help="The path where the robustness eval results are stored"
    )
    args = parser.parse_args()

    # Retrieve robustness eval dataframe.
    robustness_eval_df = pd.read_csv(Path(args.fpath).absolute())

    # Rename 'disturbance_label' column to 'disturbance'.
    robustness_eval_df.rename(
        columns={"disturbance_label": "disturbance"}, inplace=True
    )

    # Remove non relevant observations and references from the dataframe.
    filtered_eval_df = robustness_eval_df[
        ["step", "disturber", "disturbance", "observation_1", "reference_1"]
    ]

    # Remove number suffix from observation and reference columns.
    filtered_eval_df.rename(
        columns={
            "observation_1": "observation",
            "reference_1": "reference",
        },
        inplace=True,
    )

    # Merge observation and references into one "value" column and add a "signal" column
    # that specifies whether the signal is a reference or observation.
    filtered_eval_df = filtered_eval_df.melt(
        id_vars=["step", "disturbance", "disturber"],
        value_vars=["observation", "reference"],
        var_name="signal",
        value_name="value",
    )

    # Plot the selected observation and reference for each disturbance.
    fig, ax = plt.subplots(figsize=(12, 6), tight_layout=True)
    sns.lineplot(
        data=filtered_eval_df,
        x="step",
        y="value",
        hue="disturbance",
        style="signal",
        palette="tab10",
        legend="full",
        ax=ax,
    )
    ax.set_xlabel("Step")
    ax.set_ylabel("Value")
    ax.set_title("Observation and reference signals for each disturbance")
    plt.show()
